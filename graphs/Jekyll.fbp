# This graph contains the main control flow of the Jekyll site-building process

# The source inport is where the graph finds the Jekyll site sources
EXPORT=SOURCE.IN:SOURCE

# The destination inport is where the graph creates the site
EXPORT=DESTINATION.IN:DESTINATION

# The generated outport tells paths of all generated files
EXPORT=GENERATED.OUT:GENERATED

# The errors outport outputs any errors
EXPORT=ERRORS.OUT:ERRORS

Source(Split) OUT -> DIRECTORY GetConfig(jekyll/GetConfig)
GetConfig() CONFIG -> IN SplitConfig(Split)

Source() OUT -> IN FindFiles(Merge)
FindFiles() OUT -> DIRECTORY LoadDocuments(jekyll/LoadDocuments)
LoadDocuments() SUBDIRECTORY -> IN FindFiles()

'text' -> ROUTES DetermineType(jekyll/MimeRouter)
LoadDocuments() DOCUMENT -> IN DetermineType()

# Text files parsed for Front Matter
DetermineType() OUT -> IN GroupDocs(jekyll/GroupDocuments)
GroupDocs() LAYOUT -> LAYOUTS Build(jekyll/BuildDocuments)
GroupDocs() INCLUDE -> INCLUDES Build()
SplitConfig() OUT -> CONFIG Build()

GroupDocs() ERRORS -> IN Errors(Merge)

# Check content format for conversions
'text/x-markdown' -> ROUTES ContentConversions(jekyll/DocumentMimeRouter)
# Markdown conversion
ContentConversions() OUT -> IN ConvertMarkdown(jekyll/ConvertMarkdown)
ConvertMarkdown() OUT -> IN Build()
# Other content formats (CSS, HTML, JavaScript, ...)
ContentConversions() MISSED -> IN Build()

# For posts we need to extract metadata and build path
# before processing
GroupDocs() POST -> IN Metadata(jekyll/PathMetadata)
Source() OUT -> SOURCE Metadata()
Source() OUT -> SOURCE BuildPath(jekyll/BuildPostPath)
SplitConfig() OUT -> CONFIG BuildPath()
Metadata() OUT -> IN SplitPosts(Split)
SplitPosts() OUT -> IN BuildPath() OUT -> IN ContentConversions()

'1000' -> TIMEOUT Collect(CollectUntilIdle)
SplitPosts() OUT -> IN Collect(CollectUntilIdle)
SplitConfig() OUT -> CONFIG BuildPostCollections(jekyll/PostCollector)
Collect() OUT -> IN BuildPostCollections()
BuildPostCollections() OUT -> READYCONFIG Build()

# Statics we can send out as-is
GroupDocs() STATIC -> IN ContentConversions()

Source() OUT -> SOURCE SaveBuilt(jekyll/SaveFile)
Destination(Split) OUT -> DESTINATION SaveBuilt()
Build() GENERATED -> IN SaveBuilt()
SaveBuilt() OUT -> IN Generated(Merge)
SaveBuilt() ERROR -> IN Errors(Merge)

# Binary files that will be copied as-is
'/_' -> REGEXP FilterDirs(FilterPacket)
DetermineType() MISSED -> IN FilterDirs()
FilterDirs() OUT -> IN DropDir(Drop)
Source() OUT -> SOURCE CopyFiles(jekyll/CopyFile)
Destination() OUT -> DESTINATION CopyFiles()
FilterDirs() MISSED -> IN CopyFiles()

CopyFiles() OUT -> IN Generated()
CopyFiles() ERRORS -> IN Errors(Merge)
